<?php
return [
    /*
   |--------------------------------------------------------------------------
   | JWT Authentication Secret
   |--------------------------------------------------------------------------
   |
   | 用于加密生成 token 的 secret
   |
   */
    'secret' => env('JWT_SECRET'),
    /*
   |--------------------------------------------------------------------------
   | JWT Authentication Keys
   |--------------------------------------------------------------------------
   |
   | 如果你在 .env 文件中定义了 JWT_SECRET 的随机字符串
   | 那么 jwt 将会使用 对称算法 来生成 token
   | 如果你没有定有，那么jwt 将会使用如下配置的公钥和私钥来生成 token
   |
   */
    'keys' => [
        /*
       |--------------------------------------------------------------------------
       | Public Key
       |--------------------------------------------------------------------------
       |
       | 公钥
       |
       */
        'public' => env('JWT_PUBLIC_KEY'),
        /*
       |--------------------------------------------------------------------------
       | Private Key
       |--------------------------------------------------------------------------
       |
       | 私钥
       |
       */
        'private' => env('JWT_PRIVATE_KEY'),
        /*
       |--------------------------------------------------------------------------
       | Passphrase
       |--------------------------------------------------------------------------
       |
       | 私钥的密码。 如果没有设置，可以为 null。
       |
       */
        'passphrase' => env('JWT_PASSPHRASE'),
    ],
    /*
   |--------------------------------------------------------------------------
   | JWT time to live
   |--------------------------------------------------------------------------
   |
   | 指定 access_token 有效的时间长度（以分钟为单位），默认为1小时，您也可以将其设置为空，以产生永不过期的标记
   |
   */
    'ttl' => env('JWT_TTL', 1),
    /*
   |--------------------------------------------------------------------------
   | Refresh time to live
   |--------------------------------------------------------------------------
   |
   | 指定 access_token 可刷新的时间长度（以分钟为单位）。默认的时间为 2 周。
   | 大概意思就是如果用户有一个 access_token，那么他可以带着他的 access_token
   | 过来领取新的 access_token，直到 2 周的时间后，他便无法继续刷新了，需要重新登录。
   |
   */
    'refresh_ttl' => env('JWT_REFRESH_TTL', 20160),
    /*
   |--------------------------------------------------------------------------
   | JWT hashing algorithm
   |--------------------------------------------------------------------------
   |
   | 指定将用于对令牌进行签名的散列算法。
   |
   */
    'algo' => env('JWT_ALGO', 'HS256'),
    /*
   |--------------------------------------------------------------------------
   | Required Claims
   |--------------------------------------------------------------------------
   |
   | 指定必须存在于任何令牌中的声明。
   |
   |
   */
    'required_claims' => [
        'iss',
        'iat',
        'exp',
        'nbf',
        'sub',
        'jti',
    ],
    /*
   |--------------------------------------------------------------------------
   | Persistent Claims
   |--------------------------------------------------------------------------
   |
   | 指定在刷新令牌时要保留的声明密钥。
   |
   */
    'persistent_claims' => [
        // 'foo',
        // 'bar',
    ],
    /*
   |--------------------------------------------------------------------------
   | Blacklist Enabled
   |--------------------------------------------------------------------------
   |
   | 为了使令牌无效，您必须启用黑名单。
   | 如果您不想或不需要此功能，请将其设置为 false。
   |
   */
    'blacklist_enabled' => env('JWT_BLACKLIST_ENABLED', true),
    /*
   | -------------------------------------------------------------------------
   | Blacklist Grace Period
   | -------------------------------------------------------------------------
   |
   | 当多个并发请求使用相同的JWT进行时，
   | 由于 access_token 的刷新 ，其中一些可能会失败
   | 以秒为单位设置请求时间以防止并发的请求失败。
   |
   */
    'blacklist_grace_period' => env('JWT_BLACKLIST_GRACE_PERIOD', 0),
    /*
   |--------------------------------------------------------------------------
   | Providers
   |--------------------------------------------------------------------------
   |
   | 指定整个包中使用的各种提供程序。
   |
   */
    'providers' => [
        /*
       |--------------------------------------------------------------------------
       | JWT Provider
       |--------------------------------------------------------------------------
       |
       | 指定用于创建和解码令牌的提供程序。
       |
       */
        'jwt' => Tymon\JWTAuth\Providers\JWT\Namshi::class,
        /*
       |--------------------------------------------------------------------------
       | Authentication Provider
       |--------------------------------------------------------------------------
       |
       | 指定用于对用户进行身份验证的提供程序。
       |
       */
        'auth' => Tymon\JWTAuth\Providers\Auth\Illuminate::class,
        /*
       |--------------------------------------------------------------------------
       | Storage Provider
       |--------------------------------------------------------------------------
       |
       | 指定用于在黑名单中存储标记的提供程序。
       |
       */
        'storage' => Tymon\JWTAuth\Providers\Storage\Illuminate::class,
    ],
];
